{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","views/Home/Home.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","_useState3","useState","_useState4","_slicedToArray","totalSupply","setTotalSupply","useEffect","_fetchTotalSupply","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","cakeContract","supply","wrap","_context2","prev","next","getCakeContract","methods","call","sent","BigNumber","stop","apply","arguments","fetchTotalSupply","useBurnedBalance","tokenAddress","_useState5","_useState6","balance","setBalance","web3","useWeb3","fetchBalance","_ref2","_callee3","contract","res","_context3","getBep20Contract","balanceOf","useTokenBalance","_useState","_useState2","account","useWeb3React","fastRefresh","_ref","_callee","_context","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","fetchBalances","calls","rawResults","results","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","index","_objectSpread","useAllEarnings","balances","fetchAllBalances","CardValue","value","decimals","_ref$fontSize","fontSize","_ref$lineHeight","lineHeight","_ref$prefix","prefix","_ref$bold","bold","_ref$color","color","_useCountUp","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","_jsxs","Text","style","children","Block","styled","div","_templateObject","_taggedTemplateLiteral","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","multipliedBy","usePriceCakeBusd","_jsx","CakeWalletBalance","cakeBalance","getCakeAddress","getBalanceNumber","_Fragment","StyledFarmStakingCard","Card","_templateObject2","CardImage","img","_templateObject3","Label","_templateObject4","theme","colors","textSubtle","Actions","_templateObject5","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","t0","finish","CardBody","Heading","size","mb","src","alt","width","height","Button","id","disabled","length","onClick","concat","UnlockButton","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetchData","response","responseData","fetch","json","console","error","useGetStats","tvl","toLocaleString","maximumFractionDigits","Skeleton","mediaQueries","lg","CardMidContent","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","slice","farmsToDisplay","_farmsLP$find","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","times","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","variant","Flex","justifyContent","NavLink","exact","activeClassName","to","ArrowForwardIcon","mt","Hero","Cards","BaseLayout","sm","_ref3","CTACards","_ref4","_ref5","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/7.30a9ea81.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\r\nimport useWeb3 from './useWeb3'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account } = useWeb3React()\r\n  const web3 = useWeb3()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf(account).call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, tokenAddress, web3, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getCakeContract()\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n  const web3 = useWeb3()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const contract = getBep20Contract(tokenAddress, web3)\r\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [web3, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n}\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      {/* <CardBusdValue value={earningsBusd} /> */}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\r\n  const { account } = useWeb3React()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {/* <CardBusdValue value={busdBalance} /> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  background-image: url('/images/cake-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: top right;\r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label>{TranslateString(544, 'AQUA to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'AQUA in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              width=\"100%\"\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting AQUA')\r\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton width=\"100%\" />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(534, 'AQUA Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total AQUA Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total AQUA Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New AQUA/block')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={0} value={100} />\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useGetStats } from 'hooks/api'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  const data = useGetStats()\r\n  const tvl = data && data.tvl ? data.tvl.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(762, 'Total Value Locked (TVL)')}\r\n        </Heading>\r\n        {data ? (\r\n          <>\r\n            <Heading size=\"xl\">$TBC</Heading>\r\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all internal and external LPs and Syrup Pools')}</Text>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Skeleton height={66} />\r\n          </>\r\n        )}\r\n      </CardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import { useEffect, useState } from 'react'\r\n\r\n/* eslint-disable camelcase */\r\nexport interface DeBankTvlResponse {\r\n  id: string\r\n  chain: string\r\n  name: string\r\n  site_url: string\r\n  logo_url: string\r\n  has_supported_portfolio: boolean\r\n  tvl: number\r\n}\r\n\r\nexport const useGetStats = () => {\r\n  const [data, setData] = useState<DeBankTvlResponse | null>(null)\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await fetch('https://openapi.debank.com/v1/protocol?id=bsc_pancakeswap')\r\n        const responseData: DeBankTvlResponse = await response.json()\r\n\r\n        setData(responseData)\r\n      } catch (error) {\r\n        console.error('Unable to fetch data:', error)\r\n      }\r\n    }\r\n\r\n    fetchData()\r\n  }, [setData])\r\n\r\n  return data\r\n}","import React, { useCallback, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\r\nimport { NavLink } from 'react-router-dom'\r\nimport useI18n from 'hooks/useI18n'\r\nimport BigNumber from 'bignumber.js'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin: 0;\r\n    max-width: none;\r\n  }\r\n`\r\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\r\n  line-height: 44px;\r\n`\r\nconst EarnAPYCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const bnbPrice = usePriceBnbBusd()\r\n\r\n  const maxAPY = useRef(Number.MIN_VALUE)\r\n\r\n  const getHighestAPY = () => {\r\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n\r\n    calculateAPY(activeFarms)\r\n\r\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\r\n  }\r\n\r\n  const calculateAPY = useCallback(\r\n    (farmsToDisplay) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n\r\n      farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\r\n\r\n        return apy\r\n      })\r\n    },\r\n    [bnbPrice, farmsLP],\r\n  )\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading color=\"contrast\" size=\"lg\">\r\n          Earn up to\r\n        </Heading>\r\n        <CardMidContent color=\"#7645d9\">\r\n          {getHighestAPY() ? (\r\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}\r\n        </CardMidContent>\r\n        <Flex justifyContent=\"space-between\">\r\n          <Heading color=\"contrast\" size=\"lg\">\r\n            in Farms\r\n          </Heading>\r\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\r\n            <ArrowForwardIcon mt={30} color=\"primary\" />\r\n          </NavLink>\r\n        </Flex>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default EarnAPYCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\r\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  // background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n  background-repeat: no-repeat;\r\n  background-position: left top, right top;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 136px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'Aquaprotocol')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          <EarnAPYCard />\r\n          {/* <EarnAssetCard /> */}\r\n          {/* <LotteryCard /> */}\r\n        </Cards>\r\n        <CTACards>\r\n          {/* <EarnAPYCard /> */}\r\n          {/* <WinCard /> */}\r\n        </CTACards>\r\n        <Cards>\r\n          <CakeStats />\r\n          <TotalValueLockedCard />\r\n        </Cards>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}